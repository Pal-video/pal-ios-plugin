//
//  PalPlugin.swift
//  pal2
//
//  Created by Dimitri Dessus on 15/11/2022.
//

import Foundation

public class PalPlugin {
  public static let sharedInstance = PalPlugin()
  
  // Http
  private var apiToken: String?
  lazy private var serverUrl: String = "https://back.pal.video"
  
  // Apis
  private var sessionApi: SessionApi?
  private var eventApi: EventApi?
  private var triggeredEventApi: PalTriggeredEventApi?
  
  // Pal SDK
  private var palVideoTrigger: PalVideoTrigger?
  private let palSdk: PalSdk = PalSdk()
  
  public init() {
    UIFont.loadFonts()
  }
  
  /// initialize the pal sdk
  /// a session UID string is generated by the server to identify the current user
  /// [navigatorKey] the navigator key we needs to show the video as an overlay
  public func initialize(apiToken: String, serverUrl: String? = nil, completion: (() -> Void)? = nil) {
    self.apiToken = apiToken
    if (serverUrl != nil) {
      self.serverUrl = serverUrl!
    }
    
    let httpClient = HttpClient(baseUrl: self.serverUrl, apiToken: self.apiToken!)
    
    // initialize all apis
    self.sessionApi = SessionApi(
      httpClient: httpClient
    )
    self.eventApi = EventApi(
      httpClient: httpClient
    )
    self.triggeredEventApi = PalTriggeredEventApi(httpClient: httpClient)
    self.sessionApi!.initSession {
      debugPrint("✅ Session initialized!")
      
      completion?()
    }
  }
  
  /// send the screen view event to the server
  /// if a video is triggered, it will be returned
  /// depending on configuration
  /// - user will see video on first time this screen as been seen
  /// Or each time this screen is visited
  public func logCurrentScreen(controller: UIViewController, route: String, completion: (() -> Void)? = nil) {
    self.palVideoTrigger = nil
    
    if (!(self.sessionApi?.hasSession ?? false)) {
      debugPrint("⚠️ You need to have a session!")
      return
    }
    
    self.eventApi?.logCurrentScreen(session: self.sessionApi!.session, name: route) { palVideoTrigger in
      if (palVideoTrigger == nil) {
        return;
      }
      
      self.palVideoTrigger = palVideoTrigger
      
      if (self.palVideoTrigger!.isTalkType) {
        debugPrint("🔹 Talk video found!")
        self.showVideo(controller: controller, trigger: palVideoTrigger!)
      } else if (self.palVideoTrigger!.isSurveyType) {
        debugPrint("🔹 Survey video found! but not available on iOS for now!")
        // TODO:
        // self.showSurvey(controller: controller, trigger: palVideoTrigger!)
      }
      
      completion?()
    }
  }
  
  /// reset the stored session UID from the local storage
  /// call it whenever your user logs out
  public func clearSession(completion: (() -> Void)?) {
    self.sessionApi!.clearSession()
    self.sessionApi!.initSession {
      completion?()
    }
  }
  
  /// returns the current session UID used by Pal to identify the current user
  ///
  /// for more informations about sessions please check our documentation
  public func getSession() -> String? {
    if (self.sessionApi!.hasSession) {
      return self.sessionApi!.session.uid
    }
    return nil
  }
  
  /// bind the user to an existing session id
  /// - the session id must exists on Pal server
  /// - the session id exists on current project
  /// You can use this when one of your users logs in again after a logout
  ///
  /// for more informations about sessions please check our documentation
  public func setSession(sessionId: String) {
    self.sessionApi!.session = PalSession(uid: sessionId)
  }
  
  private func showVideo(controller: UIViewController, trigger: PalVideoTrigger) {
    palSdk.showVideoOnly(view: controller.view, videoAsset: trigger.videoUrl!, videoThumbUrl: trigger.videoThumbUrl!, userName: trigger.videoSpeakerName!, companyTitle: trigger.videoSpeakerRole!, onVideoEnd: {
      self.onVideoViewed(trigger: trigger)
    }, onSkip: {
      self.onVideoSkipped(trigger: trigger)
    }, onExpand: {
      self.onVideoExpand(trigger: trigger)
    })
  }
  
  private func showSurvey(controller: UIViewController, trigger: PalVideoTrigger) {
//    palSdk.showSingleChoiceSurvey(view: controller.view, videoAsset: trigger.videoUrl!, userName: trigger.videoSpeakerName!, companyTitle: trigger.videoSpeakerRole!, question: trigger.survey!.question, choices: trigger.survey!.options.map({ item in
//      return Choice(code: item.key, text: item.value)
//    }))
  }
  
  private func onTapChoice(trigger: PalVideoTrigger, choice: Choice) {
    self.palVideoTrigger = nil
    
    let event = VideoTriggerEvent.singleChoice(sessionId: self.sessionApi!.session.uid, choiceCode: choice.code)
    self.triggeredEventApi!.save(event: event, eventlogId: trigger.eventLogId)
    self.triggeredEventApi!.send()
  }
  
  private func onVideoExpand(trigger: PalVideoTrigger) -> Void {
    let event = VideoTriggerEvent.videoOpen(sessionId: self.sessionApi!.session.uid)
    self.triggeredEventApi!.save(event: event, eventlogId: trigger.eventLogId)
  }
  
  private func onVideoViewed(trigger: PalVideoTrigger) {
    self.palVideoTrigger = nil
    
    let event = VideoTriggerEvent.videoViewed(sessionId: self.sessionApi!.session.uid)
    self.triggeredEventApi!.save(event: event, eventlogId: trigger.eventLogId)
    self.triggeredEventApi!.send()
  }
  
  private func onVideoSkipped(trigger: PalVideoTrigger) {
    self.palVideoTrigger = nil
    
    let event = VideoTriggerEvent.videoSkipped(sessionId: self.sessionApi!.session.uid)
    self.triggeredEventApi!.save(event: event, eventlogId: trigger.eventLogId)
    self.triggeredEventApi!.send()
  }
}
